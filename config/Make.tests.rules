# **********************************************************************
#
# Copyright (c) 2018-present ZeroC, Inc. All rights reserved.
#
# **********************************************************************

#
# $(call test,[$1])
#
# Returns the test project name (./test/Ice/operations -> test/Ice/operations)
#
test = $(patsubst $(lang_srcdir)/%,%,$(if $1,$1,$(currentdir)))

#
# $(call test-sources,$1=sources,$2=dir,$3=main-src extra-srcs)
#
# Returns sources if set, otherwise if main-src exists return main-src + extra-srcs, if it
# doesn't exist, returns an empty value.
#
test-sources = $(call unique,$(if $1,$(foreach f,$1,$(notdir $(wildcard $2/$f))),\
                 $(if $(wildcard $2/$(firstword $3)),$(foreach f,$3,$(notdir $(wildcard $2/$f))))))

#
# The test executables to try to build in each test directory
#
test-programs           = writer reader

#
# The default test sources for each test executable.
#
test-writer-sources     = Writer.$1 Client.$1 *Test.ice AllTests.$1
test-reader-sources     = Reader.$1 Server.$1 *Test.ice TestI.$1

#
# $(call create-test-project,test)
#
# Defines a project for the given test.
#
# The following variables can be defined to customize the build of the test:
#
# <name>_cleandirs
# <name>_clean
# <name>_bindir
# <name>_libdir
# <name>_sliceflags
# <name>_cppflags
# <name>_dependencies
# <name>_programs
# <name>_libraries
#
# The following variables allows to specify per-target (program or library) configuration
#
# <name>_<target>_sources
# <name>_<target>_sources
#
define create-test-project

$1_srcdir       := $1
$1_programs     := $$(or $$($1_programs),$(test-programs))
$1_caninstall   := no

$1_writer_sources       := $$(call test-sources,$$(call $1_writer_sources,$$($1_srcext)),$$($1_srcdir),\
                                $$(call test-writer-sources,$$($1_srcext)))

$1_reader_sources       := $$(call test-sources,$$(call $1_reader_sources,$$($1_srcext)),$$($1_srcdir),\
                                $$(call test-reader-sources,$$($1_srcext)))

$1_programs     := $$(foreach p,$$($1_programs),$$(if $$($1_$$(p)_sources),$1_$$(p)))

$$(foreach m,$$($1_programs) $$($1_libraries),$$(eval $$m_sources := $$(addprefix $$($1_srcdir)/,$$($$m_sources))))

projects += $(project)

endef

#
# Returns the tests which don't have a Makefile.mk fragment specified
#
tests-without-project-makefile = $(call unique,$(foreach d,$(call dirname,$(shell find $(lang_srcdir)/test -name "*.cpp")),\
                                     $(if $(or $(wildcard $d/Makefile.mk),$(filter %/generated,$d)),,$(call test,$d))))

#
# The tests variable is used to load tests in Makefile.mk fragments
#
tests :=
